var LetDooJS = {};

(function(){

    LetDooJS.System = function (env) {

        var SCRIPTS_CORE = ["Router","Routing-App","Process","Controller","Render","HandlingDOM","XMLHttpRequest-Components", "Listenner", "Mustache-Lib"];

        var DOMhead = document.head,
            path = "http://" ,
            folderWeb = "web",
            environnement = env,
            scripts_imported = [],
            instances = [];

        path = setPath();

        LetDooJS.System.prototype.loadCore = function (callback) {
            this.load ( SCRIPTS_CORE , callback );
        };

        LetDooJS.System.prototype.load = function (files, callback) {
            var scriptToImport = [];
            for (var i in files){
                file = files[i];
                var name = setOptionScript(file);
                if(typeof scripts_imported[name]["loaded"] == "undefined") {
                    scripts_imported[name]["loaded"] = false;
                    scriptToImport.push(name);
                }
            }
            callback = (callback) ? callback : function(){};
            if(scriptToImport.length >= 1) importRecursive(scriptToImport, 0, callback);
            else callback();
        };

        LetDooJS.System.prototype.importCss = function (files,web) {
            var href = (web) ? path + "web/css/" : path + "letdoojs/css/" ;
            for (var name in files){
                var style = document.createElement("link");
                style.type = "text/css";
                style.rel = "stylesheet";
                style.href = href + files[name] + ".css";
                DOMhead.insertBefore(style, DOMhead.firstChild);
            }
        };

        LetDooJS.System.prototype.get = function (name, param, _new) {
            checkScript(name);
            var namespace = scripts_imported[name]["namespace"];
            if (typeof LetDooJS[namespace][name] == "function"){
                if(_new) return new LetDooJS[namespace][name](param);
                if(instances[name]){
                    return instances[name];
                }else{
                    return instances[name] = new LetDooJS[namespace][name](param);
                }
            }else{
                return LetDooJS[namespace][name];
            }
        };

        LetDooJS.System.prototype.getObject = function (name) {
            checkScript(name);
            var namespace = scripts_imported[name]["namespace"];
            return LetDooJS[namespace][name];
        };

        LetDooJS.System.prototype.getController = function (name) {
            checkScript(name);
            var namespace = scripts_imported["Controller"]["namespace"];
            if(instances[name]){
                return instances[name];
            }else{
                return instances[name] = new LetDooJS[namespace]["Controller"]();
            }
        };

        LetDooJS.System.prototype.getPath = function (){
            return path;
        };

        LetDooJS.System.prototype.getWebPath = function (){
            var wp = path + folderWeb;
            return ( wp.substr(-1) == "/" ) ? wp.slice(0, -1) : wp ;
        };

        LetDooJS.System.prototype.getEnvironnement = function (){
           return environnement;
        };

        function addScriptToDom (name, func) {
            var script = document.createElement("script");
            script.src = scripts_imported[name]["src"];
            script.addEventListener('load', function () {
                scripts_imported[name]["loaded"] = true;
                if(instances["Profiler"]) instances["Profiler"].profiler(name);
                func();
            },false);
            DOMhead.appendChild(script);
            if(instances["Profiler"]) instances["Profiler"].profiler(name);
        }

        function importRecursive (scripts, i, callback){
            addScriptToDom (scripts[i], function () {
                i++;
                if(scripts[i]) importRecursive(scripts,i, callback);
                else callback();
            });
        }

        function setOptionScript (fileName){
            var opt = fileName.split("-");
            if(!scripts_imported[opt[0]]) {
                if(!opt[1]) opt[1] = "Core";
                scripts_imported[opt[0]] = [];
                scripts_imported[opt[0]]["namespace"] = opt[1][0].toUpperCase() + opt[1].substring(1);
                scripts_imported[opt[0]]["src"] = getSrc(opt);
                if(environnement == "prod"){
                    if(scripts_imported[opt[0]]["namespace"] != "Lib")  scripts_imported[opt[0]]["loaded"] = true;
                }
            }
            return opt[0];
        }

        function checkScript (name){
            if(!scripts_imported[name])
                throw ("Script " + name + " is not imported");

            if(!scripts_imported[name]["loaded"])
                throw ("Script " + name + " is not loaded yet");
        }

        function getSrc(opt){
            opt[1] = opt[1].toLowerCase();
            if(opt[1] == "controller")
                return path + "src/controllers/" +  opt[0] + ".js";
            if(opt[1] == "lib")
                return path + "lib/" +  opt[0] + ".js";

            return path + "letdoojs/" + opt[1] + "/" +  opt[0] + ".js";
        }

        function setPath (){
            var regex = new RegExp("(.*)" + folderWeb + "\/*");
            regex.test(location.href);
            return RegExp["$1"];
        }

    };

})();
(function(){

	LetDooJS.App = {};
	LetDooJS.Core = {};
	LetDooJS.Controller = {};
	LetDooJS.Components = {};
	LetDooJS.Behaviors = {};
	LetDooJS.Helpers = {};
	LetDooJS.Utils = {};

	LetDooJS.App.Kernel = function (){

		LetDooJS.System.load (["Config-App","Profiler"],function(){
			LetDooJS.System.get("Profiler");
			LetDooJS.System.importCss(LetDooJS.App.Config.css_to_import);
			LetDooJS.System.importCss(LetDooJS.App.Config.your_css, true);
		});

		LetDooJS.System.loadCore (function () {
			var routing = LetDooJS.System.get("Routing");
			var router = LetDooJS.System.get("Router",routing);
			if(routing["HOME"]){
				router.launch("HOME");
			}
			router.launch();
		});
	};

})();
LetDooJS.App.Config = {
	env : "prod",
	css_to_import : ["resetCssYui","behaviors"],
	your_css : ["style"]
};
LetDooJS.App.Routing = {

	/*
	uniq_name : {
		pattern : "/", process : "controller::action" , params : {}
	},
	*/

	HOME : {
		process : "home::index"
	},

	myFisrtUrl : {
		pattern : "/acc", process : "home::acc" , params : {}
	},

	mySecondUrl : {
		pattern : "/autre" , process : "autre::index" , params : {}
	}

};

(function(){

	LetDooJS.Core.Controller = function(){

		self.renderApplied = false;

		self.prototype.bindController = function (name, func) {
			if(!self.prototype[name]) self.prototype[name] = func;
		};

		self.prototype.render = function (nameView, params){
			self.renderApplied = true;
			var render = LetDooJS.System.get("Render");
			render.displayView(nameView, params, function(){
				self.callbackRender();
			});
		};

	};

	var self = LetDooJS.Core.Controller;

})();
(function(){

	LetDooJS.Core.HandlingDOM = function(){

		var DOMbody = document.body,
			listenner = LetDooJS.System.get("Listenner");

		LetDooJS.Core.HandlingDOM.prototype.append = function (src, target, name) {
			name = (name) ? " " + name : "";
			var div = (target) ? target : this.create({tag : "div", className : "LDJ-Template" + name});
			div.innerHTML = src;
			listenner.listen(div);
			DOMbody.appendChild(div);
		};

		LetDooJS.Core.HandlingDOM.prototype.write = function (txt, target) {
			if(!target) target = DOMbody;
			var div = document.createElement("div");
			div.textContent = txt ;
			target.appendChild(div);
		};

		LetDooJS.Core.HandlingDOM.prototype.create = function (params){
			var div = document.createElement(params.tag);
			if (params.className) div.setAttribute("class",params.className);
			return div;
		};
	};

})();
(function(){

	LetDooJS.Core.Listenner = function(){

		var router = LetDooJS.System.get("Router");

		LetDooJS.Core.Listenner.prototype.listen = function (target) {
			items = target.querySelectorAll("[data-route]");
			for (var i in items){
				bindAction(items[i]);
			}


		};

		function bindAction (item, e){
			if (item.nodeType != 1) return false;

			e = (e) ? e : "click";
			item.addEventListener (e,function(event){
				event.preventDefault();
				var name = item.getAttribute("data-route");
				router.launch(name);
			},false);

		}

	};

})();
(function(){

	LetDooJS.Core.Process = function (_R) {

		var call = [],
			routeWaiting = [] ;


		LetDooJS.Core.Process.prototype.runAction = function (_R) {
			routeWaiting.push(_R);
			if(routeWaiting.length == 1) processAction(_R);
		};

		LetDooJS.Core.Controller.callbackRender = function(){
			routeWaiting.shift();
			LetDooJS.Core.Controller.renderApplied = false;
			if(routeWaiting[0]) processAction(routeWaiting[0]);
		};

		function processAction (_R) {

			if (typeof _R == "function") return _R();

			var nameController = _R.controller[0].toUpperCase() + _R.controller.substring(1) + "Controller";

			if(!call[nameController]){
				LetDooJS.System.load([nameController+"-Controller"] , function () {

					var controllerCalled = LetDooJS.System.getController(nameController);
					controllerCalled.bindController(nameController, LetDooJS.Controller[nameController]);

					var require = ( controllerCalled[nameController]["require"] ) ? controllerCalled[nameController]["require"] : [] ;
					LetDooJS.System.load(require, function () {
						if(controllerCalled[nameController]["init"]) controllerCalled[nameController]["init"](controllerCalled);
						callAction(controllerCalled, nameController, _R);
					});
				});
				call[nameController] = true;
			}else{
				var controllerCalled = LetDooJS.System.getController(nameController);
				callAction(controllerCalled, nameController, _R);
			}
		}

		function callAction(controller, nameController, _R) {
			var actionCalled = _R.action +"Action" ;
			if (_R.pattern) history.pushState( _R , _R.controller + "-" + actionCalled, LetDooJS.System.getWebPath() + _R.pattern);
			if (!controller[nameController][actionCalled]) throw "Action " + nameController + "::" + actionCalled + " not exist";
			controller[nameController][actionCalled](controller);

			if (!LetDooJS.Core.Controller.renderApplied) LetDooJS.Core.Controller.callbackRender();
		}
	};

})();
(function(){

	LetDooJS.Core.Profiler = function() {

		var script = [];
		var startApp = new Date().getTime();
		var endApp = new Date().getTime();

		if(LetDooJS.System.getEnvironnement() == "dev") ModeDEV();

		LetDooJS.Core.Profiler.prototype.log = function (msg, type) {
			console.log(msg);
		};

		LetDooJS.Core.Profiler.prototype.profiler = function (name, type) {
			if(!script[name]){
				script[name] = [] ;
				script[name]["start"] = new Date().getTime();
				script[name]["end"] = 0;
			}else{
				script[name]["end"] = new Date().getTime();
			}
		};

		LetDooJS.Core.Profiler.prototype.display = function (){
			var DOM = LetDooJS.System.get("HandlingDOM");
			for (var i in script) {
				var time = (script[i]["end"] - script[i]["start"] > 0 ) ? script[i]["end"] - script[i]["start"] : 0 ;
				DOM.write(i + " Chargé en " + time  + " ms.");
			}
		};

		function ModeDEV(){
			localStorage.clear();
			LetDooJS.System.load (["DevFunctions-Utils"]);
		}
	};

})();
(function(){

	LetDooJS.Core.Render = function () {

		const PREFIX = "LDS_VIEW_";
		var viewCompiled = [];

		LetDooJS.Core.Render.prototype.compileView = function (nameView,callback) {
			var template = localStorage[PREFIX + nameView];
			if (template){
				viewCompiled[nameView] = Mustache.compile(template);
				callback (viewCompiled[nameView]);
			} else{
				var request = LetDooJS.System.get("XMLHttpRequest");
				request.getTemplate(nameView, null, function (template){
					localStorage[PREFIX + nameView] = template;
					viewCompiled[nameView] = Mustache.compile(template);
					callback (viewCompiled[nameView]);
				});
			}
		};

		LetDooJS.Core.Render.prototype.displayView = function (nameView, params, callback){
			if(!params) params = {};
			var DOM = LetDooJS.System.get("HandlingDOM");
			if(viewCompiled[nameView]) {
				var view = viewCompiled[nameView](params);
				DOM.append(view, null, nameView);
				if (callback) callback();
			} else {
				this.compileView(nameView, function (compile){
					var view = viewCompiled[nameView](params);
					DOM.append(view, null, nameView);
					if (callback) callback();
				});
			}
		};
	};

})();
(function(){

	LetDooJS.Core.Router = function (routing) {

		var routes = routing;
		var process = LetDooJS.System.get("Process");

	    window.onpopstate= function (event) {
	        var _R = event.state;
	        if(_R) process.runAction(_R);
		};

		function getPattern () {
			var url = location.href ;
			var pattern = url.replace(LetDooJS.System.getWebPath() ,"");
			return pattern ;
		}

		function getRouteByPattern (pattern) {
			for (var i in routes) {
				if (routes[i].pattern == pattern) return splitRoute(routes[i]);
			}
			return null;
		}

		function getRouteByName (name) {
			return splitRoute(routes[name]);
		}

		function splitRoute(R){
			CtrlAct = R.process.split("::");
			R.controller = CtrlAct[0];
			R.action = CtrlAct[1];
			return R;
		}

		LetDooJS.Core.Router.prototype.launch = function (nameRoute){
			if (typeof nameRoute == "function")
				return process.runAction(nameRoute);

			var routeCalled = (!nameRoute ) ?
				getRouteByPattern(getPattern()) :
				routeCalled = getRouteByName(nameRoute);
			if(routeCalled ){
				process.runAction(routeCalled);
			}else{
				throw "Route Not Found !";
			}
		};

	};
})();
(function(){

	Node.prototype.contextMenu = function (){

		const CLASS_NAME = "LDS_contextMenu";
		var DOM = LetDooJS.System.get("HandlingDOM");

		var DOMContextMenu = DOM.create({tag : "div" , className : CLASS_NAME});
		DOMContextMenu.style.position = "absolute";
		DOMContextMenu.style.display = "none";
		document.body.appendChild(DOMContextMenu);

		this.addEventListener("contextmenu",function(event){
			event.preventDefault();
			hideAllMenu();
			DOMContextMenu.style.top  = event.clientY+"px";
			DOMContextMenu.style.left  = event.clientX+"px";
			DOMContextMenu.style.display = "block";
		},false);

		DOMContextMenu.addEventListener("mousedown",function (event){
			event.stopPropagation();
		},false);

		document.addEventListener("mousedown", function(event){
			if (event.which == 1)
				DOMContextMenu.style.display = "none";
		},false);

		function hideAllMenu(){
			var divs = document.querySelectorAll(CLASS_NAME);
			for (var i in divs){
				if (divs[i].nodeType == 1) divs[i].style.display = "none";
			}
		}
	};

})();
(function(){

	LetDooJS.Components.XMLHttpRequest = function () {

		var xhr = new XMLHttpRequest();

		LetDooJS.Components.XMLHttpRequest.prototype.request = function (methode, url){
			xhr.open("GET", url, true);
			xhr.send(null);
		};

		LetDooJS.Components.XMLHttpRequest.prototype.getTemplate = function (name, folder, callback){
			var url = LetDooJS.System.getPath() + ((folder) ? folder : "src" ) + "/views/" + name + ".html" ;
			this.request("GET", url);
			xhr.onload = function (){
				if (xhr.status == 200)
					callback(xhr.responseText);
				else{
					throw "Template " + url + " not found";
				}
			};
		};

	};

})();
function l (data) {
	console.log(data);
}

function LDJ_clear() {
	localStorage.clear();
}

function LDJ_go (name) {
	if (!name) {
		routes = LetDooJS.System.get("Routing");
		for (var i in routes){
			console.log(i);
		}
		return "Please choose an action.";
	}
	var router = LetDooJS.System.get("Router");
	router.launch(name);
}

function LDJ_Routes (name) {
	routes = LetDooJS.System.get("Routing");
	return (name) ? routes[name] : routes ;
}
(function(){

	/*merge : function (obj1, obj2){
		for (key in obj2){
			obj1[key]=obj2[key];
		}
	}*/


})();
(function(){


	LetDooJS.Controller.AutreController = {



		indexAction : function ($scope){
			console.log("autre");

			$scope.render("index",{ok : "Ok!"});

		}

	};




})();
(function(){


	LetDooJS.Controller.HomeController = {

		require : [
			"ContextMenu-Behaviors"
		],

		indexAction : function ($scope){
			console.log("index");



			$scope.render("homeTemplate",{ok : "Ok!"});


		},

		accAction : function (){
			console.log("acc");

		}
	};

})();